/* begin_generated_IBM_copyright_prolog                             */
/*                                                                  */
/* This is an automatically generated copyright prolog.             */
/* After initializing,  DO NOT MODIFY OR MOVE                       */
/* **************************************************************** */
/* THIS SAMPLE CODE IS PROVIDED ON AN "AS IS" BASIS. IBM MAKES NO   */
/* REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, CONCERNING    */
/* USE OF THE SAMPLE CODE, OR THE COMPLETENESS OR ACCURACY OF THE   */
/* SAMPLE CODE. IBM DOES NOT WARRANT UNINTERRUPTED OR ERROR-FREE    */
/* OPERATION OF THIS SAMPLE CODE. IBM IS NOT RESPONSIBLE FOR THE    */
/* RESULTS OBTAINED FROM THE USE OF THE SAMPLE CODE OR ANY PORTION  */
/* OF THIS SAMPLE CODE.                                             */
/*                                                                  */
/* LIMITATION OF LIABILITY. IN NO EVENT WILL IBM BE LIABLE TO ANY   */
/* PARTY FOR ANY DIRECT, INDIRECT, SPECIAL OR OTHER CONSEQUENTIAL   */
/* DAMAGES FOR ANY USE OF THIS SAMPLE CODE, THE USE OF CODE FROM    */
/* THIS [ SAMPLE PACKAGE,] INCLUDING, WITHOUT LIMITATION, ANY LOST  */
/* PROFITS, BUSINESS INTERRUPTION, LOSS OF PROGRAMS OR OTHER DATA   */
/* ON YOUR INFORMATION HANDLING SYSTEM OR OTHERWISE.                */
/*                                                                  */
/* (C) Copyright IBM Corp. 2015  All Rights reserved.               */
/*                                                                  */
/* end_generated_IBM_copyright_prolog                               */

use com.ibm.streamsx.utility::*;

composite affinity {

type
  DataStat = int32 count;

graph
  stream<int8 i> b = Beacon() { param period: 0.1; }

  stream<DataStat> c = Functor(b) {
    logic
      state : {
        mutable int32 beatCount = 0;
        mutable boolean runOnce = false;
      }
      onTuple b : {
        // First time through this code, set the affinity.  The thread will
        // stay on the chosen processor until told otherwise.
        if(runOnce == false) { 
          setCPUAffinity((uint64)0); 
          runOnce = true;
        }
        beatCount++;

	// Add some gratuitous busy work to show a busy processor.
	mutable int32 i = 0; while(i<(int32)10000000) {i++; beatCount++;}
      }
    output
      c : count = beatCount; 
  }

  () as Writer = Custom(c) 
  {
    logic
      onTuple c : {
        println(c); 
      }
  }
}
